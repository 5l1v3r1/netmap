===========================================================================
                        NETMAP PASSTHROUGH HOWTO
===========================================================================

This document describes how to configure netmap passthrough, a technology
that enables very fast network I/O (up to 30 Mpps and more) for QEMU Virtual
Machines.
With netmap passthrough you can make an arbitrary netmap port (physical NIC,
VALE port, pipe endpoint, monitor, ...) available inside a VM. In this way
your (unmodified) netmap application can run isolated inside a VM, without
losing the performance advantages of netmap. In particular you will still
able to zerocopy across the passed-through netmap ports (a.k.a. ptnetmap
ports).
Netmap passthrough requires support in both host (hypervisor) and guest OS.
Host needs a ptnetmap-capable hypervisor like QEMU (Linux host with KVM
enabled) or bhyve (FreeBSD host). Guest OS requires some ptnetmap drivers that
are already included with netmap, although not enabled by default.
Guest OS ptnetmap drivers are available for both Linux and FreeBSD guests.

Netmap passthrough is an enabler technology for Network Function
Virtualization, as it can be used to build chains of VMs for high-rate
middlebox packet processing. Given the variety
of netmap ports you can decide to connect the VMs together through
zerocopy ports (i.e. netmap pipes), or with copy for untrusted VMs
(i.e. VALE ports). You can get NIC-independent NIC passthrough by
directly passing a dedicated physical netmap port to a VM.

More informations about ptnetmap are available in these slides:
    * https://github.com/vmaffione/netmap-tutorial/blob/master/virtualization.pdf
and these papers
    * http://info.iet.unipi.it/~luigi/papers/20160613-ptnet.pdf
    * http://info.iet.unipi.it/~luigi/papers/20150315-netmap-passthrough.pdf (older)

---------------------------------------------------------------------------
                Configure Linux host and QEMU for ptnetmap
---------------------------------------------------------------------------

On the Linux host, configure, build and install netmap with ptnetmap support:

    $ git clone https://github.com/luigirizzo/netmap.git
    $ cd netmap
    $ ./configure --enable-ptnetmap [other options]
    $ make
    $ sudo make install

Download, build and install the ptnetmap-enabled QEMU:

    $ git clone https://github.com/vmaffione/qemu
    $ ./configure --target-list=x86_64-softmmu --enable-kvm --enable-vhost-net --disable-werror --enable-netmap --enable-ptnetmap
    $ make
    $ sudo make install

Load the ptnetmap-enabled netmap

    $ sudo rmmod netmap  # Possibly remove a previous netmap module:
    $ sudo modprobe netmap

Example to run a VM passing through a VALE port (vale1:10):

    $ sudo qemu-system-x86_64 img.qcow2 -enable-kvm -smp 2 -m 2G -vga std -device ptnet-pci,netdev=data10,mac=00:AA:BB:CC:0a:0a -netdev netmap,ifname=vale1:10,id=data10,passthrough=on

Example to run a VM passing though the "left" endpoints of two pipes endpoints
(the "right" endpoints can be connected to other VMs or netmap programs running
directly on the host.

    $ sudo qemu-system-x86_64 img.qcow2 -enable-kvm -smp 2 -m 2G -vga std -device ptnet-pci,netdev=data1,mac=00:AA:BB:CC:0b:01 -netdev netmap,ifname=netmap:pipe0{1,id=data1,passthrough=on -device ptnet-pci,netdev=data1,mac=00:AA:BB:CC:0b:02 -netdev netmap,ifname=netmap:pipe1{1,id=data1,passthrough=on


---------------------------------------------------------------------------
                Configure Linux guest for ptnetmap
---------------------------------------------------------------------------

In the Linux guest, compile, build and install netmap with ptnetmap support:

    $ git clone https://github.com/luigirizzo/netmap.git
    $ cd netmap
    $ ./configure --enable-ptnetmap
    $ make
    $ sudo make install

Load netmap module

    $ sudo rmmod netmap  # Possibly remove a previous netmap module:
    $ sudo modprobe netmap

As the netmap module is loaded, a new network interface will show up for each
passed-through netmap port, (e.g. 'ens4'). You can check that an interface is
a netmap passthrough one checking the driver:

    $ ethtool -i ens4
    driver: ptnetmap-guest-drivers
    version:
    [...]

A guest ptnetmap port behaves like any other netmap ports. You can use pkt-gen
to test transmission;

    $ sudo pkt-gen -i ens4 -f tx


---------------------------------------------------------------------------
                Use ptnetmap with FreeBSD guests
---------------------------------------------------------------------------

Netmap passthrough guest drivers are already included with netmap from FreeBSD
12 versions. When running FreeBSD guest with ptnetmap ports (e.g. using QEMU as
described above), an interface called "ptnet$N" will show up for each passed
through port.
If you want to use ptnetmap with older FreeBSD guests you can just update your
FreeBSD source tree with the updated netmap code from github and rebuild your
kernel.

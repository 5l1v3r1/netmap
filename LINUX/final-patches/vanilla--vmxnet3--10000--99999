diff -ruN a/vmxnet3/vmxnet3_drv.c b/vmxnet3/vmxnet3_drv.c
--- a/vmxnet3/vmxnet3_drv.c	2018-01-26 08:16:40.302737839 +0300
+++ b/vmxnet3/vmxnet3_drv.c	2018-01-26 08:16:40.305737839 +0300
@@ -24,6 +24,7 @@
  *
  */
 
+
 #include <linux/module.h>
 #include <net/ip6_checksum.h>
 
@@ -308,6 +309,11 @@
 #endif /* __BIG_ENDIAN_BITFIELD  */
 
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE) || defined(DEV_NETMAP)
+#include "if_vmxnet3_netmap.h"
+#endif
+
+
 static void
 vmxnet3_unmap_tx_buf(struct vmxnet3_tx_buf_info *tbi,
 		     struct pci_dev *pdev)
@@ -367,6 +373,14 @@
 	int completed = 0;
 	union Vmxnet3_GenericDesc *gdesc;
 
+#ifdef DEV_NETMAP
+	struct net_device *netdev = adapter->netdev;
+
+	if (netmap_tx_irq(netdev, 0) != NM_IRQ_PASS)
+		return 0;
+#endif
+		
+
 	gdesc = tq->comp_ring.base + tq->comp_ring.next2proc;
 	while (VMXNET3_TCD_GET_GEN(&gdesc->tcd) == tq->comp_ring.gen) {
 		completed += vmxnet3_unmap_pkt(VMXNET3_TCD_GET_TXIDX(
@@ -1266,6 +1280,15 @@
 	struct Vmxnet3_RxDesc rxCmdDesc;
 	struct Vmxnet3_RxCompDesc rxComp;
 #endif
+
+#ifdef DEV_NETMAP
+	u_int total_packets = 0;
+	struct net_device *netdev = adapter->netdev;
+	
+	if (netmap_rx_irq(netdev, 0, &total_packets) != NM_IRQ_PASS)
+		return 1;
+#endif /* DEV_NETMAP */
+
 	vmxnet3_getRxComp(rcd, &rq->comp_ring.base[rq->comp_ring.next2proc].rcd,
 			  &rxComp);
 	while (rcd->gen == rq->comp_ring.gen) {
@@ -2431,6 +2454,10 @@
 		adapter->rx_queue[0].rx_ring[0].size,
 		adapter->rx_queue[0].rx_ring[1].size);
 
+#ifdef DEV_NETMAP
+	vmxnet3_netmap_init_buffers(adapter);
+#endif /* DEV_NETMAP */    
+
 	vmxnet3_tq_init_all(adapter);
 	err = vmxnet3_rq_init_all(adapter);
 	if (err) {
@@ -2476,7 +2503,7 @@
 
 	/* Apply the rx filter settins last. */
 	vmxnet3_set_mc(adapter->netdev);
-
+    
 	/*
 	 * Check link state when first activating device. It will start the
 	 * tx queue if the link is up.
@@ -3290,6 +3317,11 @@
 		dev_err(&pdev->dev, "Failed to register adapter\n");
 		goto err_register;
 	}
+    
+    
+#ifdef DEV_NETMAP
+	vmxnet3_netmap_attach(adapter);
+#endif /* DEV_NETMAP */    
 
 	vmxnet3_check_link(adapter, false);
 	return 0;
@@ -3342,6 +3374,10 @@
 	cancel_work_sync(&adapter->work);
 
 	unregister_netdev(netdev);
+    
+#ifdef DEV_NETMAP
+	vmxnet3_netmap_detach(netdev);
+#endif /* DEV_NETMAP */    
 
 	vmxnet3_free_intr_resources(adapter);
 	vmxnet3_free_pci_resources(adapter);
